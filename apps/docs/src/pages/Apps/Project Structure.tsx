namespace jzor.docs.pages.apps {
    export function projectstructure() {
        return <ExamplePage>
{markdocs`
## Project Structure

Jzor adopts a comprehensive project structure that encompasses all necessary files for the complete application. 
This includes TypeScript files for both server and client sides, CSS files, and various asset files. 
The structure is designed for flexibility, allowing files to be rearranged with relative ease. 
In Jzor, the conventional method of file inclusion based on file references is not utilized, which means that renaming files and folders does not impact the functionality.

What is crucial in Jzorâ€™s structure are the namespaces. 
While it's common practice to name files and folders in a way that reflects their corresponding namespaces for easier identification, this is not a strict requirement. 
The emphasis is on the organization of namespaces rather than the specific naming of files and folders.

### The project Root

${<img src="/images/project-structure.png" style="margin-left: 2rem; float: right"/>}

The application's root folder is its primary residence, and initiating the Jzor Host involves directing it to this root folder. 
This can be done by either pointing to the folder directly or starting the binary while in the root folder's working directory.

Within this root folder, you have the freedom to organize files according to your preference, with two exceptions: the auto-generated <code>.jzor</code> folder and two specific files detailed below. While flexibility in file structure is a perk, adopting a systematic approach, such as categorizing source and library files in <code>libs</code> and <code>src</code> folders, is recommended for better organization.

- <code>tsconfig.json</code>: This file configures the TypeScript compiler. Most settings in this file are best left as they are.
- <code>app.yml</code>: This file contains the Jzor application's configuration settings necessary for running the app.

> **NOTE**: <code>app.prod.yml</code> is an optional configuration file that overrides the default Jzor application settings. It can be activated via the command line, and you can create as many of these as needed.

In addition to these required files, Jzor also needs a TypeScript file that contains the Main Part. This Main Part is identified in the <code>app.yml</code> file by its full type name, including the namespace and class name. In this example, the <code>src/Main.tsx</code> file is where our Main Part is defined.

### The .jzor folder

The <code>.jzor</code> folder is automatically generated by the Jzor host for its internal operations. This folder, updated whenever the application is launched or compiled, contains four key files:

- <code>@client.js</code>: This file aggregates all client-side scripts into a single file post-compilation
- <code>@styles.css</code>: This file compiles all CSS classes into one consolidated file after compilation
- <code>assembly.json</code>: This is the Jzor TypeScript compiled assembly, which includes all transpiled files and their sources.
- <code>CLR.d.ts</code>: This file contains the Jzor TypeScript definitions, automatically generated when the host starts (provided the host compiler is enabled).

> **NOTE**: It's possible to run the host with just the asset folders/files, the <code>app.yml</code> configuration, and the <code>.jzor</code> folder, if the host compiler is disabled. In such a case, TypeScript files are not necessary for operation, and the application will run solely based on the <code>assembly.json</code> file.

### The libs folder

As previously mentioned, you have the flexibility to organize files according to your preferences. 
In this example, a <code>libs</code> folder has been established to house the default Jzor library. 
It's important to note the presence of an arrow on the right side of the <code>jzor-0.9.0</code> folder, which indicates that this library is connected through a symbolic folder link.

Alternatively, you could directly copy all the library files into the <code>libs</code> folder, or even use a zip file containing all the necessary library files. 
The choice largely depends on whether you want the library to be modifiable during the development of your application. However, in most cases, there is no requirement for the library to be editable.

### The src folder

The <code>src</code> folder contains all the files pertinent to the actual application. 
You have the liberty to organize these files in a way that best suits your project's needs, as the linkage between files is based on namespaces and symbols, not on filenames or their locations. 
In our minimal example, we only include a Main.tsx file, which contains the Main Part of the application. 
Typically, a real-world project would comprise numerous files, but for the sake of simplicity, this example focuses on just the fundamental aspects.

### Asset files

Asset files and folders in Jzor are designated for browser download and are uniquely identified by a preceding '<code>@</code>' character. Any files without this character are not downloadable. For instance, in our example, the files <code>.jzor/@styles.css</code> and <code>.jzor/@client.js</code> are accessible for browser download and will be available at the root URLs <code>https://yourhost/styles.css</code> and <code>https://yourhost/client.js</code> respectively.

You have the flexibility to place asset files anywhere in the project structure, yet they remain accessible at the root via HTTP requests.
This is an advantage when you include or exclude external library code, as the assets would typically be packaged along with the library code.

If you store files within an '<code>@</code>' prefixed folder (an asset folder), they inherit the folder's name as their root HTTP path. It's important to place only downloadable assets in these folders, as every file in an asset folder is available for download.

Here's a breakdown of how different types of asset folders and files are handled in Jzor:

| Type   | File System Path                         | HTTP Path                                      | Description |
|--------|------------------------------------------|------------------------------------------------|-------------|
| File   | /@favicon.svg                            | https://.../favicon.svg                        | Asset file served at HTTP root path |
| File   | /somepath/@myscript.js                   | https://.../myscript.js                        | Asset files within a source folder are also served at root |
| Folder | /@scripts/jQuery.js                      | https://.../scripts/jQuery.js                  | Folder name becomes part of the path |
| Folder | /@/jQuery.js                             | https://.../jQuery.js                          | A folder without the asset name appended, implies the root path |
| Folder | /@/anyfolder/jQuery.js                   | https://.../anyfolder/jQuery.js                | Subfolders in an asset folder are included in the path |
| Folder | /@styles/nested/reset.css                | https://.../styles/nested/reset.css            | Asset folder and subfolder names are included in the path |
| Folder | /somepath/@images/anyfolder/theimage.jpg | https://.../images/anyfolder/theimage.jpg      | Names of non-asset (source) parent folders are omitted in the path |

This table provides a clear representation of how Jzor handles asset files and folders, delineating the corresponding HTTP paths based on their location within the file system.

> **NOTE**: Asset folders and files are ignored by the compiler.

### _imports.tsx

The <code>src/_imports.tsx</code> file can be used to import types and/or namespaces from other libraries into the namespace of the current project. You can also put this into your <code>Main.tsx</code> file, or any other file.
${<debug.SourceView source="/src/pages/Apps/_imports._tsx" x-style="rounded" lang="tsx" />}
`}
        </ExamplePage>
    }
}